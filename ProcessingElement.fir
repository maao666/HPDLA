;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit ProcessingElement : 
  module ProcessingElement : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, flip weight : UInt<32>, flip unlockWeight : UInt<1>, flip inPartialSum : UInt<32>, flip typeSelection : UInt<2>, flip inCompensation : UInt<32>, outCompensation : UInt<32>, outPartialSum : UInt<32>, forwardedInput : UInt<32>, forwardedWeight : UInt<32>}
    
    reg resultReg : UInt<32>, clock @[PE.scala 24:22]
    reg weightReg : UInt<32>, clock @[PE.scala 25:22]
    reg compensationReg : UInt<32>, clock @[PE.scala 26:45]
    node _T = eq(io.unlockWeight, UInt<1>("h01")) @[PE.scala 29:36]
    node _T_1 = mux(_T, io.weight, weightReg) @[PE.scala 29:19]
    weightReg <= _T_1 @[PE.scala 29:13]
    io.forwardedWeight <= weightReg @[PE.scala 30:22]
    reg _T_2 : UInt, clock @[PE.scala 33:31]
    _T_2 <= io.input @[PE.scala 33:31]
    io.forwardedInput <= _T_2 @[PE.scala 33:21]
    node _T_3 = eq(io.typeSelection, UInt<1>("h01")) @[PE.scala 36:25]
    when _T_3 : @[PE.scala 36:34]
      node _T_4 = asSInt(weightReg) @[PE.scala 38:31]
      node _T_5 = asSInt(io.input) @[PE.scala 38:49]
      node _T_6 = mul(_T_4, _T_5) @[PE.scala 38:38]
      node _T_7 = bits(_T_6, 31, 0) @[PE.scala 38:56]
      node _T_8 = asSInt(_T_7) @[PE.scala 38:74]
      node _T_9 = asSInt(io.inPartialSum) @[PE.scala 41:52]
      node _T_10 = add(_T_8, _T_9) @[PE.scala 41:28]
      node _T_11 = tail(_T_10, 1) @[PE.scala 41:28]
      node _T_12 = asSInt(_T_11) @[PE.scala 41:28]
      wire _T_13 : UInt<32> @[PE.scala 42:33]
      node _T_14 = asUInt(_T_12) @[PE.scala 42:33]
      _T_13 <= _T_14 @[PE.scala 42:33]
      resultReg <= _T_13 @[PE.scala 42:15]
      skip @[PE.scala 36:34]
    else : @[PE.scala 43:40]
      node _T_15 = eq(io.typeSelection, UInt<2>("h02")) @[PE.scala 43:31]
      when _T_15 : @[PE.scala 43:40]
        resultReg <= UInt<1>("h00") @[PE.scala 45:15]
        skip @[PE.scala 43:40]
      else : @[PE.scala 46:15]
        node _T_16 = mul(weightReg, io.input) @[PE.scala 48:37]
        node _T_17 = add(_T_16, io.inPartialSum) @[PE.scala 48:57]
        node _T_18 = tail(_T_17, 1) @[PE.scala 48:57]
        resultReg <= _T_18 @[PE.scala 48:15]
        skip @[PE.scala 46:15]
    node _T_19 = mul(weightReg, io.input) @[PE.scala 50:26]
    node _T_20 = add(_T_19, io.inPartialSum) @[PE.scala 50:37]
    node _T_21 = tail(_T_20, 1) @[PE.scala 50:37]
    resultReg <= _T_21 @[PE.scala 50:13]
    io.outPartialSum <= resultReg @[PE.scala 51:20]
    io.outCompensation <= compensationReg @[PE.scala 54:22]
    
